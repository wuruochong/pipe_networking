WRITE(2)                   Linux Programmer's Manual                  WRITE(2)

NNAAMMEE
       write - write to a file descriptor

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       ssssiizzee__tt wwrriittee((iinntt _f_d,, ccoonnsstt vvooiidd **_b_u_f,, ssiizzee__tt _c_o_u_n_t));;

DDEESSCCRRIIPPTTIIOONN
       wwrriittee()  writes  up  to  _c_o_u_n_t bytes from the buffer pointed _b_u_f to the
       file referred to by the file descriptor _f_d.

       The number of bytes written may be less than  _c_o_u_n_t  if,  for  example,
       there  is  insufficient space on the underlying physical medium, or the
       RRLLIIMMIITT__FFSSIIZZEE resource limit is encountered (see sseettrrlliimmiitt(2)),  or  the
       call was interrupted by a signal handler after having written less than
       _c_o_u_n_t bytes.  (See also ppiippee(7).)

       For a seekable file (i.e., one to which llsseeeekk(2) may  be  applied,  for
       example,  a  regular file) writing takes place at the current file off‐
       set, and the file offset is incremented by the number of bytes actually
       written.   If  the file was ooppeenn(2)ed with OO__AAPPPPEENNDD, the file offset is
       first set to the end of the file before writing.  The adjustment of the
       file offset and the write operation are performed as an atomic step.

       POSIX  requires  that  a  rreeaadd(2)  which can be proved to occur after a
       wwrriittee() has returned returns the new data.  Note that not all  filesys‐
       tems are POSIX conforming.

RREETTUURRNN VVAALLUUEE
       On  success,  the  number  of bytes written is returned (zero indicates
       nothing was written).  It is not an error if  this  number  is  smaller
       than the number of bytes requested; this may happen for example because
       the disk device was filled.  See also NOTES.

       On error, -1 is returned, and _e_r_r_n_o is set appropriately.

       If _c_o_u_n_t is zero and _f_d refers to a  regular  file,  then  wwrriittee()  may
       return  a failure status if one of the errors below is detected.  If no
       errors are detected, or error detection is not  performed,  0  will  be
       returned  without  causing  any  other effect.  If _c_o_u_n_t is zero and _f_d
       refers to a file other than a regular file, the results are not  speci‐
       fied.

EERRRROORRSS
       EEAAGGAAIINN The  file descriptor _f_d refers to a file other than a socket and
              has been marked nonblocking (OO__NNOONNBBLLOOCCKK), and  the  write  would
              block.  See ooppeenn(2) for further details on the OO__NNOONNBBLLOOCCKK flag.

       EEAAGGAAIINN or EEWWOOUULLDDBBLLOOCCKK
              The  file  descriptor  _f_d refers to a socket and has been marked
              nonblocking   (OO__NNOONNBBLLOOCCKK),   and   the   write   would   block.
              POSIX.1-2001  allows  either error to be returned for this case,
              and does not require these constants to have the same value,  so
              a portable application should check for both possibilities.

       EEBBAADDFF  _f_d is not a valid file descriptor or is not open for writing.

       EEDDEESSTTAADDDDRRRREEQQ
              _f_d  refers to a datagram socket for which a peer address has not
              been set using ccoonnnneecctt(2).

       EEDDQQUUOOTT The user's quota of disk blocks on the filesystem containing the
              file referred to by _f_d has been exhausted.

       EEFFAAUULLTT _b_u_f is outside your accessible address space.

       EEFFBBIIGG  An attempt was made to write a file that exceeds the implementa‐
              tion-defined maximum file size or the process's file size limit,
              or to write at a position past the maximum allowed offset.

       EEIINNTTRR  The  call  was interrupted by a signal before any data was writ‐
              ten; see ssiiggnnaall(7).

       EEIINNVVAALL _f_d is attached to an object which is unsuitable for writing;  or
              the  file  was  opened  with  the  OO__DDIIRREECCTT flag, and either the
              address specified in _b_u_f, the value specified in _c_o_u_n_t,  or  the
              current file offset is not suitably aligned.

       EEIIOO    A low-level I/O error occurred while modifying the inode.

       EENNOOSSPPCC The device containing the file referred to by _f_d has no room for
              the data.

       EEPPEERRMM  The operation was prevented by a file seal; see ffccnnttll(2).

       EEPPIIPPEE  _f_d is connected to a pipe or socket whose reading end is closed.
              When  this  happens the writing process will also receive a SSIIGG‐‐
              PPIIPPEE signal.  (Thus, the write return value is seen only if  the
              program catches, blocks or ignores this signal.)

       Other errors may occur, depending on the object connected to _f_d.

CCOONNFFOORRMMIINNGG TTOO
       SVr4, 4.3BSD, POSIX.1-2001.

       Under  SVr4  a  write may be interrupted and return EEIINNTTRR at any point,
       not just before any data is written.

NNOOTTEESS
       A successful return from wwrriittee() does not make any guarantee that  data
       has been committed to disk.  In fact, on some buggy implementations, it
       does not even guarantee that space has successfully been  reserved  for
       the  data.   The  only way to be sure is to call ffssyynncc(2) after you are
       done writing all your data.

       If a wwrriittee() is interrupted by a signal handler before  any  bytes  are
       written, then the call fails with the error EEIINNTTRR; if it is interrupted
       after at least one byte  has  been  written,  the  call  succeeds,  and
       returns the number of bytes written.

       On  Linux,  wwrriittee()  (and  similar  system calls) will transfer at most
       0x7ffff000 (2,147,479,552) bytes, returning the number of  bytes  actu‐
       ally transferred.  (This is true on both 32-bit and 64-bit systems.)

BBUUGGSS
       According to POSIX.1-2008/SUSv4 Section XSI 2.9.7 ("Thread Interactions
       with Regular File Operations"):

           All of the following functions shall be atomic with respect to each
           other in the effects specified in POSIX.1-2008 when they operate on
           regular files or symbolic links: ...

       Among the APIs subsequently listed  are  wwrriittee()  and  wwrriitteevv(2).   And
       among  the effects that should be atomic across threads (and processes)
       are updates of the file offset.  However, on Linux before version 3.14,
       this  was  not  the  case:  if  two  processes  that share an open file
       description (see ooppeenn(2)) perform a wwrriittee() (or wwrriitteevv(2)) at the  same
       time, then the I/O operations were not atomic with respect updating the
       file offset, with the result that the blocks of data output by the  two
       processes might (incorrectly) overlap.  This problem was fixed in Linux
       3.14.

SSEEEE AALLSSOO
       cclloossee(2), ffccnnttll(2), ffssyynncc(2), iiooccttll(2), llsseeeekk(2),  ooppeenn(2),  ppwwrriittee(2),
       rreeaadd(2), sseelleecctt(2), wwrriitteevv(2), ffwwrriittee(3)

CCOOLLOOPPHHOONN
       This  page  is  part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       http://www.kernel.org/doc/man-pages/.

Linux                             2015-07-23                          WRITE(2)
